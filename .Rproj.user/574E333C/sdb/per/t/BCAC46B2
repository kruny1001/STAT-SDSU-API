{
    "collab_server" : "",
    "contents" : "\n# Use the data from the Retention assignment and redo the assignment using a MARS model.  \n# MARS example code can be found in the contents tab in code labeled Lindsay and also Mars.  \n# Note that you have to pass the information regarding a family=binomial to make it logistic.  \n\n# The example code shows that in the mars code.\n# Be sure to summarize the data, give histograms and visualization as necessary.  \n# Measure the accuracy of the model with a gains table as well as ROC, KS, cumulative lift as appropriate.  \n# I will be more 'picky' not regarding format of the report.  \n# You should turn in a professionally formatted report.  \n# Additionally a powerpoint as one or more of you will be asked to briefly present this in class.\n\nrequire(data.table)\nlibrary(ggplot2)\nlibrary(RCurl)\nlibrary(sparklyr)\nlibrary(dplyr)\n\nlibrary(earth)\nlibrary(mda)\nlibrary(faraway)\nlibrary(lattice)\n\nloadData <- function(){\n  url <- \"https://raw.githubusercontent.com/kruny1001/STAT551-Data/master/retentiondata.csv\"\n  myfile <- getURL(url, ssl.verifyhost=FALSE, ssl.verifypeer=FALSE)\n  dat <- read.csv(textConnection(myfile), header=TRUE)\n  DT <- data.table(dat)\n  return (DT)\n}\n\nscotterPlot <- function(DT){\n  p <- ggplot(DT)\n  p <- p + labs(list(title = \"Quarterly Fico Score V.S. Behavior Score\", x = \"Quarterly Fico Score\", y = \"Behavior Score\")) \n  p <- p+ geom_point(data = subset(DT, Bad == \"0\"), aes(x = Quarterly_Fico_Score, y = Behavior_Score, color = factor(Bad)), color=\"orange\", size=2)\n  p <- p + geom_point(data = subset(DT, Bad == \"1\"), aes(x = Quarterly_Fico_Score, y = Behavior_Score, color = factor(Bad)), color=\"red\", size=2)\n  return(p)\n}\n\nhistograms <- function(DT){\n  par(mfrow=c(1,3))\n  hist(DT$Quarterly_Fico_Score, main=\"Fico Score Histogram\", xlab=\"Quarterly Fico Score\", ylim=c(0, 2000))\n  hist(DT$Behavior_Score, main=\"Behavior Score Histogram\", xlab=\"Behavior Score\", ylim=c(0, 2000))\n  hist(DT$Bad, main=\"Bad Histogram\", xlab=\"Bad\", ylim=c(0, 7000))\n}\n\nhistogramsPred <- function(DT){\n  par(mfrow=c(1,2))\n  hist(DT$Quarterly_Fico_Score, main=\"Fico Score Histogram\", xlab=\"Quarterly Fico Score\", ylim=c(0, 2000))\n  hist(DT$Behavior_Score, main=\"Behavior Score Histogram\", xlab=\"Behavior Score\", ylim=c(0, 2000))\n  #hist(DT$Bad, main=\"Bad Histogram\", xlab=\"Bad\", ylim=c(0, 7000))\n}\n\nhistogramsDep <- function(DT){\n  #hist(DT$Quarterly_Fico_Score, main=\"Fico Score Histogram\", xlab=\"Quarterly Fico Score\", ylim=c(0, 2000))\n  #hist(DT$Behavior_Score, main=\"Behavior Score Histogram\", xlab=\"Behavior Score\", ylim=c(0, 2000))\n  hist(DT$Bad, main=\"Bad Histogram\", xlab=\"Bad\", ylim=c(0, 7000))\n}\n#color = c(\"red\", \"blue\")\nscotterPlot <- function(DT){\n  p <- ggplot(DT)\n  p <- p + labs(list(title = \"Quarterly Fico Score V.S. Behavior Score\", x = \"Quarterly Fico Score\", y = \"Behavior Score\")) \n  p <- p+ geom_point(data = subset(DT, Bad == \"0\"), aes(x = Quarterly_Fico_Score, y = Behavior_Score, color = factor(Bad)), color=\"orange\", size=2)\n  p <- p + geom_point(data = subset(DT, Bad == \"1\"), aes(x = Quarterly_Fico_Score, y = Behavior_Score, color = factor(Bad)), color=\"red\", size=2)\n  p\n}\n\ncreatePrediction <- function(data, deg){\n  library(caret)\n  d = createDataPartition(y=data$Bad, p =.8, list =FALSE)\n  training <- data[d]\n  testing <- data[-d]\n  earth2=earth(Bad~Quarterly_Fico_Score+Behavior_Score, data=training, glm=list(family=binomial),degree=deg)\n  predictions=predict(earth2,type='response',newdata=testing)\n  testing[, prob:=predictions]\n  testing = testing[order(-rank(prob))]\n  return (testing)\n}\n\ncreateTableG <- function(passData){\n  tempData <- passData\n  totalPop = nrow(tempData)\n  cum1 <-cumsum(tempData$Bad)\n  tempData[, cum1 := cumsum(tempData$Bad)]\n  list <- 1:nrow(tempData)\n  tempData[, cum0 := list - tempData$cum1]\n  tempData[,TP := tempData$cum1/max(cum1)]\n  tempData[, FP := tempData$cum0/max(cum0)]\n  tempData[, Diff := abs(tempData$TP - tempData$FP)]\n  tempData[, RespRate:= tempData$cum1 / 1:nrow(tempData)]\n  tempData[, cumPercentPop := 1:nrow(tempData) / totalPop]\n  tempData[, positiveRate := tempData$cum1 / 1:nrow(tempData)]\n  cum1Max = max(tempData$cum1)\n  tempData[, cumLift := tempData$positiveRate/ (cum1Max / totalPop)]\n  return (tempData)\n}\n\ndrawROCCurve <- function(table){\n  plot(table$FP, table$TP, main=\"ROC Curve\", xlab=\"False Positive Rate\", ylab=\"True Positive Rate\", type=\"l\", col=\"blue\")\n  abline(0,1,col=\"red\")\n  legend(0.5, 0.3, c(\"ROC\", \"Baseline\"), lty=c(1,1), lwd=c(2.5,2.5), col=c(\"blue\", \"red\"))\n}\n\n#KS curve\ndrawKSCurve <- function(table){\n  row = table[which.max(table$Diff)]\n  \n  plot(table$cumPercentPop, table$FP, col=\"red\", xlab=\"Cumulative Percent Population\"\n       , ylab=\"Capture Rate\", type=\"l\", main=\"KS Curve\")\n  lines(table$cumPercentPop , table$TP, col=\"blue\")\n  abline(0,1,col=\"green\")\n  segments(row$cumPercentPop, row$FP, row$cumPercentPop, row$TP,lty=\"dotted\", col= 'black')\n  points(row$cumPercentPop, row$FP, bg=\"grey\")\n  points(row$cumPercentPop, row$TP, bg=\"grey\")\n  text(row$cumPercentPop+.052, (row$FP+row$TP)/2, paste(\"KS\", round(row$Diff, digits=3)))\n  legend(0.7, 0.3, c(\"TPR\", \"FPR\", paste(\"KS\", round(row$Diff, digits=3))), lty=c(1,1), lwd=c(2.5,2.5), col=c(\"blue\", \"red\", \"black\"))  \n}\n\n\n# draw the histogram with the specified number of bins\ndrawCumLift <- function(table){\n  plot(table$cumPercentPop, table$cumLift, col=\"blue\", \n       xlab=\"Cumulative Percentage\", ylab=\"Lift\", \n       main=\"Cumulative Lift\", type=\"l\")\n  legend(.7, 2, c(\"Cumulative Lift\"), lty=c(1,1), lwd=c(2.5,2.5), col=c(\"blue\"))\n}\n\ncreateKSTable <- function(table){\n  ksTable <- data.table(ID = c(\"Cumulative1\", \"Cumulative0\", \"Differences\"), \n                        Cumulative1 = table$TP, Cumulative0 = table$FP, Differences = table$Diff, \n                        cumPercentPop = table$cumPercentPop)\n  \n  ksTable[, index:=1:nrow(ksTable)]\n  return(ksTable)\n  \n}\n\n\ncreateLiftPlot <- function(table){\n  #lift\n  labels = c(\"(0,125]\",\"(125,250]\",\"(250,375]\",\"(375,500]\",\"(500,625]\", \"(625,750]\", \"(750,875]\",\"(875,1000]\", \"(1000,1125]\", \"(1125,1250]\")\n  plot(1:10, table$lift*100, type='l', main='lift', col='red', xaxt='n' ,ylim=c(0, 350))\n  line(1:10, table$lift*100)\n  axis(1, at=1:10, labels=labels, cex.axis=.7)\n  \n}\n\ncreateCumLiftPlot <- function(table){\n  #Cumlift\n  labels = c(\"(0,125]\",\"(125,250]\",\"(250,375]\",\"(375,500]\",\"(500,625]\", \"(625,750]\", \"(750,875]\",\"(875,1000]\", \"(1000,1125]\", \"(1125,1250]\")\n  plot(1:10, table$cumLift*100, main = 'Cumulative Lift', xlab = 'Cumulative Percentage',ylab = 'Lift', type = 'l', col = 'blue',  xaxt='n',ylim=c(0, 350))\n  abline(h=100, col = 'red')\n  axis(1, at=1:10, labels=labels, cex.axis=.7)\n  \n}\n\ncreateRespPlot <- function(table){\n  #Response Rate\n  labels = c(\"(0,125]\",\"(125,250]\",\"(250,375]\",\"(375,500]\",\"(500,625]\", \"(625,750]\", \"(750,875]\",\"(875,1000]\", \"(1000,1125]\", \"(1125,1250]\")\n  plot(1:10, table$responseRate*100, main = 'Cumulative Lift', xlab = 'Response Percentage', ylab = 'Lift', type = 'l', col = 'blue',  xaxt='n',ylim=c(0, 100))\n  axis(1, at=1:10, labels=labels, cex.axis=.7)\n}\n\ncreateGains <- function(sortedData){\n  list <- rep(1:nrow(sortedData), 1)\n  numBy <- round(nrow(sortedData) / 10)\n  dec <- cut(list, breaks = seq(0, nrow(sortedData)+numBy/2, by = numBy))\n  index <- seq(1, 1, length.out = nrow(sortedData))\n  sortedData[ ,dec1 := dec]\n  sortedData[ ,index1 := index]\n  options(scipen = 1)\n  agg.sum <- aggregate(Bad~dec , data = sortedData, FUN=sum)\n  agg.index <- aggregate(index~dec , data = sortedData, FUN=sum)\n  \n  cumPercent1 <- agg.sum$Bad / nrow(sortedData)\n  table <- data.table( decile = agg.sum$dec,\n                       numPop = agg.index$index,\n                       cumPop = cumsum(agg.index$index),\n                       cumPerctPop = agg.index$index / nrow(sortedData),\n                       numBad = agg.sum$Bad,\n                       cumBad = cumsum(agg.sum$Bad),\n                       cumPercent = cumsum(agg.sum$Bad / sum(agg.sum$Bad))\n  )\n  \n  responseRate <- table$numBad /table$numPop\n  table[, responseRate := responseRate]\n  totalResponseRate <- sum(table$numBad) / nrow(sortedData)\n  lift <- table$responseRate /totalResponseRate\n  table[,lift := lift]\n  cumResponseRate <- table$cumBad / table$cumPop\n  table[, cumResponseRate := cumResponseRate]\n  cumLift <- table$cumResponseRate / totalResponseRate\n  table[, cumLift := cumLift]\n  return(table)\n}\n\n\"\ndata <- loadData()\nscotterPlot(data)\n\npar(mfrow=c(1,3))\nhistograms(data)\nhistogramsPred(data)\nhistogramsDep(data)\n\npredictions1 = createPrediction(data, 1)\npredictions2 = createPrediction(data, 2)\ngainsT1 = createTableG(predictions1)\ngainsT2 = createTableG(predictions2)\n\npar(mfrow=c(1,2))\ndrawROCCurve(gainsT1)\ndrawROCCurve(gainsT2)\n\n\npar(mfrow=c(1,2))\ndrawKSCurve(gainsT1)\ndrawKSCurve(gainsT2)\n\npar(mfrow=c(1,2))\ndrawCumLift(gainsT1)\ndrawCumLift(gainsT2)\n\npar(mfrow=c(1,2))\nKST1 = createKSTable(gainsT1)\nKST2 = createKSTable(gainsT2)\n\nmax(KST1$Differences) # KS value   \nmax(KST2$Differences) # KS value   \n\n\nfinalT1 = createGains(gainsT1)\nfinalT2 = createGains(gainsT2)\n\npar(mfrow=c(1,2))\ncreateLiftPlot(finalT1)\ncreateLiftPlot(finalT2)\n\npar(mfrow=c(1,2))\ncreateCumLiftPlot(finalT1)\ncreateCumLiftPlot(finalT2)\n\npar(mfrow=c(1,2))\ncreateRespPlot(finalT1)\ncreateRespPlot(finalT2)\n\"\n",
    "created" : 1491616733263.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2738652830",
    "id" : "BCAC46B2",
    "lastKnownWriteTime" : 1491617113,
    "last_content_update" : 1491617113735,
    "path" : "~/Documents/iCollections/School/plumber/plumber-service/re.R",
    "project_path" : "re.R",
    "properties" : {
        "tempName" : "Untitled2"
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}